local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
	Name = "Steal a country script -- Potato Hub",
	Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
	LoadingTitle = "Rayfield Interface Suite",
	LoadingSubtitle = "By Potato devs",
	ShowText = "Potato Creations", -- for mobile users to unhide rayfield, change if you'd like
	Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

	ToggleUIKeybind = "K", -- The keybind to toggle the UI visibility (string like "K" or Enum.KeyCode)

	DisableRayfieldPrompts = false,
	DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

	ConfigurationSaving = {
		Enabled = false,
		FolderName = nil, -- Create a custom folder for your hub/game
		FileName = "Big Hub"
	},

	Discord = {
		Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
		Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
		RememberJoins = true -- Set this to false to make them join the discord every time they load it up
	},

	KeySystem = false, -- Set this to true to use our key system
	KeySettings = {
		Title = "Untitled",
		Subtitle = "Key System",
		Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
		FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
		SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
		GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
		Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
	}
})

local Tab = Window:CreateTab("Player") -- Title, Image

local NoClip = Tab:CreateToggle({
	Name = "No Clip",
	CurrentValue = true,
	Flag = "Toggle1",
	Callback = (function()
		local Players = game:GetService("Players")
		local RunService = game:GetService("RunService")
		local Plr = Players.LocalPlayer
		local SteppedConnection = nil
		local Clipon = false

		return function(Value)
			Clipon = Value

			if Clipon then
				if SteppedConnection then
					SteppedConnection:Disconnect()
					SteppedConnection = nil
				end

				SteppedConnection = RunService.Stepped:Connect(function()
					for _, b in pairs(workspace:GetChildren()) do
						if b.Name == Plr.Name then
							for _, v in pairs(b:GetChildren()) do
								if v:IsA("BasePart") then
									v.CanCollide = false
								end
							end
						end
					end
				end)

			else
				if SteppedConnection then
					SteppedConnection:Disconnect()
					SteppedConnection = nil
				end
			end
		end
	end)(),
})

local SpeedSlider = Tab:CreateSlider({
	Name = "Speed",
	Range = {0, 100},
	Increment = 1,
	Suffix = "Speed",
	CurrentValue = 50,
	Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		-- The function that takes place when the slider changes
		-- The variable (Value) is a number which correlates to the value the slider is currently at
		local humanoid = game.Players.LocalPlayer.Character.Humanoid
		task.spawn(function()
			while true do
				humanoid.WalkSpeed = Value
				wait(0.2)
			end
		end)
	end,
})

local Tab2 = Window:CreateTab("Base") -- Title, Image
local Autolock1 = Tab2:CreateToggle({
	Name = "Auto Lock Floor 1",
	CurrentValue = true,
	Flag = "Toggle1",
	Callback = function(Value)
		local toggled = false
		toggled = Value
		task.spawn(function()
			while toggled do
				local args = {1}
				game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("LockGate"):InvokeServer(unpack(args))
				wait(0.2)
			end
		end)
	end,
})

local AutoCollect = Tab2:CreateToggle({
	Name = "Auto Collect Money (Floor 1)",
	CurrentValue = false,
	Flag = "AutoCollect1",
	Callback = function(Value)
		local toggled = false
		toggled = Value
		task.spawn(function()
			local remotes = game:GetService("ReplicatedStorage"):WaitForChild("Remotes")
			local collect = remotes:WaitForChild("CollectCash")
			local perArgDelay = 0.1
			local cycleDelay = 1

			while toggled do
				local startTime = tick()
				for i = 1, 10 do
					if not toggled then break end
					local args = { tostring(i) }
					pcall(function()
						collect:InvokeServer(unpack(args))
					end)
					task.wait(perArgDelay)
				end
				local elapsed = tick() - startTime
				local remaining = cycleDelay - elapsed
				if remaining > 0 then
					task.wait(remaining)
				end
			end
		end)
	end,
})
